# # lambda - выражения в языке Python представляют небольшие анонимные функции, которые определяются с помощью оператора lambda. 
# # Формальное определение лямбда-выражения:   lambda [параметры] : инструкция

# x = lambda a, b: a+b # Присвоили пееменной x временные пемременный a и b и прибавили их
# print(x(1,2)) # Вызвали лямбду x с двумя аргументами 1 и 2 и получили 3 

# # map Функция map применяет функцию к каждому элементу последовательности и возвращает итератор с результатами без использования циклов.

# spisok = [1,2,3,4,5]

# def s(x):
#     return x**2

# y = list(map(s,spisok))
# print(y)

# filter Функция filter() в Python применяет другую функцию к заданному итерируемому объекту (список, строка, словарь и так далее), 
# проверяя, нужно ли сохранить конкретный элемент или нет. Простыми словами, она отфильтровывает то, что не проходит и возвращает все остальное.
# Функция filter() принимает два параметра. Первый — имя созданной пользователем функции, а второй — итерируемый объект(список, строка, множество, кортеж и так далее).


# """
#     Программа Python для фильтрации нечетных чисел
#     в списке, используя функцию filter()
# """

# # список чисел
# numbers = [1, 2, 4, 5, 7, 8, 10, 11]

# # функция, которая проверяет числа


# def filter_odd_num(in_num):
#     if(in_num % 2) == 0:
#         return True
#     else:
#         return False


# # Применение filter() для удаления нечетных чисел
# out_filter = filter(filter_odd_num, numbers)

# print("Тип объекта out_filter: ", type(out_filter))
# print("Отфильтрованный список: ", list(out_filter))

# zip Функция zip() в Python создает итератор, который объединяет элементы из нескольких источников данных.
# Эта функция работает со списками, кортежами, множествами и словарями для создания списков или кортежей, включающих все эти данные.


# employee_numbers = [2, 9, 18, 28]
# employee_names = ["Дима", "Марина", "Андрей", "Никита"]

# zipped_values = zip(employee_names, employee_numbers)
# zipped_list = list(zipped_values)

# print(zipped_list)


